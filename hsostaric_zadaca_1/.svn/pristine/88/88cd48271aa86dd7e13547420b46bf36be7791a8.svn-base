/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.foi.nwtis.hsostaric.zadaca_1;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Hrvoje Šoštarić
 */
public class ZahtjevLeta extends Thread {

    private Socket veza;
    private InputStream inputStream;
    private OutputStream outputStream;
    private StringBuilder stringBuilder;
    private InputStreamReader streamReader;
    private OutputStreamWriter streamWriter;
    private String oznakaAviona;
    private String vrijemePolijetanje;
    private String vrijemeSlijetanja;

    public ZahtjevLeta(Socket veza) {
        this.veza = veza;
    }

    public ZahtjevLeta(String oznakaAviona, String vrijemePolijetanje, String vrijemeSlijetanja) {
        this.oznakaAviona = oznakaAviona;
        this.vrijemePolijetanje = vrijemePolijetanje;
        this.vrijemeSlijetanja = vrijemeSlijetanja;
    }

    @Override
    public void run() {
        try {
            ObradaKlijenta();
        } catch (IOException ex) {
            System.out.println("Greška: " + ex);
        } finally {
            try {
                ZatvoriKlijenta();
            } catch (IOException ex) {
                System.out.println("Došlo je do greške prilikom zatvaranja klijenta.");
            }
        }
    }

    public synchronized void ObradaKlijenta() throws IOException {
        int bajt;
        String zahtjev;
        stringBuilder = new StringBuilder();
        inputStream = veza.getInputStream();
        outputStream = veza.getOutputStream();
        streamWriter = new OutputStreamWriter(veza.getOutputStream(),
                "UTF-8");
        streamReader = new InputStreamReader(inputStream, "UTF-8");
        while ((bajt = inputStream.read()) != -1) {
            stringBuilder.append((char) bajt);
        }
        zahtjev = stringBuilder.toString();
        if (IspitajSintaksuZahtjeva(zahtjev) == true) {
            String odgovorKorisniku = PorukaUspjeha(zahtjev);
            VratiKorisnikuPoruku(odgovorKorisniku);
        } else {
            VratiKorisnikuPoruku("ERROR 20;Sintaksa primljenog zahtjeva nije ispravna;");
        }
    }

    @Override
    public synchronized void start() {
        super.start();
    }

    public synchronized boolean IspitajSintaksuZahtjeva(String zahtjev) {
        String regex = "^((LET [\\w-]{3,10}); POLIJETANJE [0-9]{4}.(0[1-9]|1[0-2]).(0[1-9]|[1-2][0-9]|3[0-1])"
                + " (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]); SLIJETANJE [0-9]{4}.(0[1-9]|1[0-2]).(0[1-9]|[1-2][0-9]|3[0-1]"
                + ") (0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]);)|(POZICIJA: [\\w-]{3,10};)$";
        Pattern pattern = Pattern.
                compile(regex);
        Matcher m = pattern.
                matcher(zahtjev);
        return m.find();
    }

    public synchronized void ZatvoriKlijenta() throws IOException {
        veza.shutdownInput();
        veza.shutdownOutput();
        veza.close();
    }

    public synchronized void VratiKorisnikuPoruku(String poruka) throws IOException {
        streamWriter.write(poruka);
        streamWriter.flush();
    }

    public synchronized String PorukaUspjeha(String zahtjev) {
        if (zahtjev.contains("POLIJETANJE")
                && zahtjev.contains("SLIJETANJE")) {
            return ProvjeraStanjaAviona(zahtjev);
        }
        return ProveriPozicijuAviona(zahtjev);
    }

    public synchronized String ProvjeraStanjaAviona(String zahtjev) {
        String[] polje;
        String oznaka;
        String polijetanje;
        String formatPolijetanje;
        String slijetanje;
        String formatSlijetanje;
        polje = zahtjev.split(";");
        oznaka = polje[0].substring(3,
                polje[0].length())
                .trim();
        polijetanje = polje[1].trim()
                .substring(11, polje[1]
                        .length() - 1);
        slijetanje = polje[2].trim()
                .substring(10, polje[2]
                        .length() - 1);
        System.out.println(oznaka + " " + polijetanje + " " + slijetanje);
        try {
            formatPolijetanje = formatirajDatum(polijetanje);
            formatSlijetanje = formatirajDatum(slijetanje);
            return StanjeUListama(oznaka, formatPolijetanje, formatSlijetanje);
        } catch (ParseException ex) {
            return "ERROR 22;Nije moguće formatirati datum;";
        }

    }

    public String formatirajDatum(String datum) throws ParseException {
        SimpleDateFormat formatDatuma = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
        String date = formatDatuma.parse(datum).
                toString();
        return date;
    }

    public synchronized String StanjeUListama(String oznaka, String vrijemePolijetanja, String vrijemeSlijetanja) {
        ZahtjevLeta zahtjevLeta;
        zahtjevLeta = new ZahtjevLeta(oznakaAviona, vrijemePolijetanje, vrijemeSlijetanja);
        if (!ServerSimulatoraLeta.ZahtjeviLetova
                .isEmpty()) {
            ServerSimulatoraLeta.ZahtjeviLetova.add(zahtjevLeta);
            return "OK;";
        }
        try {
            return TrenutnoStanjeAviona(zahtjevLeta);
        } catch (ParseException ex) {
            return "ERROR 22;Došlo je do pogriješke prilikom parsanja datuma !!!";
        }
    }

    public String TrenutnoStanjeAviona(ZahtjevLeta zahtjevLeta) throws ParseException {
        Iterator<ZahtjevLeta> iterator;
        String trenutno;
        Date trenutnoUDateu;
        Date datumSlijetanja;
        for (iterator = ServerSimulatoraLeta.ZahtjeviLetova.
                iterator(); iterator.hasNext();) {
            ZahtjevLeta element = iterator.next();
            if (element.oznakaAviona.equals(
                    zahtjevLeta.oznakaAviona)) {
                trenutno = FormatiranoTrenutnoVrijeme();
                trenutnoUDateu = formatirajStringuDate(trenutno);
                if (trenutnoUDateu.compareTo(
                        formatirajStringuDate(element.vrijemeSlijetanja)) > 0) {
                    ///avion je već sletio
                    iterator.remove();
                    ServerSimulatoraLeta.ZahtjeviLetova.add(zahtjevLeta);

                } else {
                    return "ERROR 22;Avion je još u letu;";
                }
            }
        }
        return "OK;";
    }

    public String FormatiranoTrenutnoVrijeme() {
        SimpleDateFormat formatDatuma = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
        Date date = new Date();
        return formatDatuma.format(date);

    }

    public Date formatirajStringuDate(String zapis) throws ParseException {
        SimpleDateFormat formatDatuma = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss");
        return formatDatuma.parse(zapis);
    }

    public synchronized String ProveriPozicijuAviona(String zahtjev) {
            String oznaka;
            String[] polje=zahtjev.split(":");
            Date datumSlijetanja;
            Date trenutnoVrijeme;
            oznaka=polje[1].trim()
                    .replace(";", "");
            for(ZahtjevLeta zahtjevAviona:ServerSimulatoraLeta
                    .ZahtjeviLetova){
                if(zahtjevAviona.oznakaAviona
                        .equals(oznaka)){
                    try {
                        datumSlijetanja=formatirajStringuDate(zahtjevAviona
                                .vrijemeSlijetanja);
                        trenutnoVrijeme=formatirajStringuDate(FormatiranoTrenutnoVrijeme());
                        if(trenutnoVrijeme.compareTo(datumSlijetanja)<0){
                            return "OK; LETI;";
                        }
                        return "OK; SLETIO;";
                    } catch (ParseException ex) {
                        return "ERROR 23;Pogreška u formatiranju datuma;";
                    }
                }
            }  
            return "ERROR 23; Traženog leta nema u listi !;";
    }
}
